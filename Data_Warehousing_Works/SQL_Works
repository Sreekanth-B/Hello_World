
# This file consists of Different Complex Scenarios (that occur in Data manipulation and Data extraction) and their Queries

================================================================================================================================================================
Problems & Solutions (SUBQUIRES):


Query to find all the orders issued against the salesman who may -works for customer whose id is 3007¬¬
SELECT * FROM orders WHERE salesman_id = (SELECT DISTINCT salesman_id 
     FROM orders WHERE customer_id =3007);


Query to find the name and numbers of all salesmen who had more than one customer.
SELECT salesman_id,name FROM salesman a WHERE 1 < (SELECT COUNT(*) 
     FROM customer WHERE salesman_id=a.salesman_id);
=== or
select name, salesman_id from salesman where salesman_id in (select salesman_id from customer group by salesman_id having count(*)>1)

Query to count the customers with grades above New York's average. 

SELECT grade, COUNT (*) FROM customer GROUP BY grade HAVING grade >
    (SELECT AVG(grade) FROM customer WHERE city = 'New York');


Query to find all orders with order amounts which are above-average amounts for their customers. 

SELECT * FROM orders a WHERE purch_amt >(SELECT AVG(purch_amt) FROM orders b WHERE b.customer_id = a.customer_id);


Query to find the sums of the amounts from the orders table, grouped by date, eliminating all those dates where the sum was not at least 1000.00 above the maximum order amount for that date.

SELECT ord_date, SUM (purch_amt) FROM orders a GROUP BY ord_date
HAVING SUM (purch_amt) > (SELECT 1000.00 + MAX(purch_amt) 
     FROM orders b WHERE a.ord_date = b.ord_date);

Query to extract the data from the customer table if and only if one or more of the customers in the customer table are located in London.

SELECT customer_id,cust_name, city FROM customer WHERE EXISTS
   (SELECT * FROM customer WHERE city='London');


 Query to find all the salesmen who worked for only one customer.

SELECT * FROM salesman WHERE salesman_id IN (SELECT DISTINCT salesman_id 
   FROM customer a WHERE NOT EXISTS (SELECT * FROM customer b 
      WHERE a.salesman_id=b.salesman_id AND a.cust_name<>b.cust_name));
== or
select * from salesman where salesman_id in (select salesman_id from customer group by salesman_id having count(*) =1)
Query that extract the rows of all salesmen who have customers with more than one orders.

SELECT * FROM salesman a WHERE EXISTS (SELECT * FROM customer b     
    WHERE a.salesman_id=b.salesman_id AND 1<(SELECT COUNT (*)              
		  FROM orders WHERE orders.customer_id = b.customer_id));
== or
select * from salesman where salesman_id in(select salesman_id from customer where customer_id in (select customer_id from orders group by customer_id having count(*)>1))

Query to display only those customers whose grade are, in fact, higher than every customer in New York.

SELECT * FROM customer WHERE grade > ALL (SELECT grade
	FROM customer WHERE city='New York');

Query to get all the information for those customers whose grade is not as the grade of customer who belongs to the city London. 

SELECT * FROM customer WHERE grade <> ANY (SELECT grade FROM customer
	WHERE city='London');


Query to find the average price of each manufacturer's products along with their name.

SELECT AVG(pro_price) AS "Average Price", company_mast.com_name As "Company" FROM item_mast, company_mast WHERE item_mast.pro_com= company_mast.com_id GROUP BY company_mast.com_name;


Query to display the average price of the products which is more than or equal to 350 along with their names.

SELECT AVG(pro_price) AS "Average Price", company_mast.com_name AS "Company" FROM item_mast, company_mast WHERE item_mast.pro_com= company_mast.com_id GROUP BY company_mast.com_name
   HAVING AVG(pro_price) >= 350;


Query to display the name of each company, price for their most expensive product along with their Name.

SELECT P.pro_name AS "Product Name", P.pro_price AS "Price", C.com_name AS "Company" FROM item_mast P, company_mast C
   WHERE P.pro_com = C.com_id AND P.pro_price =
     (SELECT MAX(P.pro_price) FROM item_mast P WHERE P.pro_com = C.com_id );

Query in SQL to display the first name and last name of employees working for the department which allotment amount is more than Rs.50000.


SELECT emp_fname, emp_lname FROM emp_details WHERE emp_dept IN
  (SELECT dpt_code FROM emp_department WHERE dpt_allotment > 50000);

Or ==
select ed.emp_fname,ed.emp_lname from emp_details ed inner join emp_department e on e.dpt_code=ed.emp_dept where e.dpt_allotment>50000;

Query in SQL to find the departments which sanction amount is larger than the average sanction amount of all the departments.

SELECT * FROM emp_department WHERE dpt_allotment > (SELECT AVG(dpt_allotment) FROM emp_department);

Query in SQL to find the names of departments with more than two employees are working.

SELECT dpt_name FROM emp_department WHERE dpt_code IN (SELECT emp_dept FROM emp_details GROUP BY emp_dept HAVING COUNT(*) >2 );

Query in SQL to find the first name and last name of employees working for departments which sanction amount is second lowest.

SELECT emp_fname, emp_lname FROM emp_details WHERE emp_dept IN (
  SELECT dpt_code FROM emp_department WHERE dpt_allotment= (
    SELECT MIN(dpt_allotment) FROM emp_department WHERE dpt_allotment >(SELECT MIN(dpt_allotment) FROM emp_department )));


Query to display all the orders which values are greater than the average order value for 10th October 2012

SELECT * FROM orders WHERE purch_amt > (SELECT AVG(purch_amt) 
     FROM orders WHERE ord_date ='10/10/2012');

Query to display all the customers whose id is 2001 bellow the salesman ID of Mc Lyon

SELECT * FROM customer WHERE customer_id = (SELECT salesman_id -2001 FROM salesman WHERE name = 'Mc Lyon');



Query to find the salesmen who have multiple customers. 

SELECT * FROM salesman WHERE salesman_id IN (
   SELECT DISTINCT salesman_id FROM customer a WHERE EXISTS 
(SELECT * FROM customer b WHERE b.salesman_id=a.salesman_id 
      AND b.cust_name<>a.cust_name));


Query to find all the salesmen for whom there are customers that follow them.

SELECT * FROM salesman WHERE city IN (SELECT city FROM customer);

Query to find salesmen with all information who lives in the city where any of the customers lives.

SELECT * FROM salesman WHERE city=ANY (SELECT city FROM customer);

Query to display the salesmen which name are alphabetically lower than the name of the customers.

SELECT * FROM salesman a WHERE EXISTS (SELECT * FROM CUSTOMER b WHERE  a.name  < b.cust_name);


Query to display the customers who have a greater gradation than any customer who belongs to the alphabetically lower than the city New York

SELECT * FROM customer WHERE grade > ANY (SELECT grade	FROM CUSTOMER
	WHERE  city < 'New York');

Query to display all the orders that had amounts that were greater than at least one of the orders on September 10th 2012. 

SELECT * FROM Orders WHERE purch_amt > ANY (SELECT purch_amt
	FROM orders WHERE  ord_date='2012/09/10');
Query to find all orders with an amount smaller than any amount for a customer in London.

SELECT * FROM orders WHERE purch_amt < ANY (SELECT purch_amt
	FROM orders a, customer b WHERE  a.customer_id=b.customer_id
	AND b.city='London');

Query to display all orders with an amount smaller than the amount for a customer in London.

SELECT * FROM orders WHERE purch_amt < (SELECT MAX (purch_amt)
	FROM orders a, customer b WHERE  a.customer_id=b.customer_id
	AND b.city='London');


Query to find only those customers whose grade are, higher than every customer to the city New York. 

SELECT * FROM customer WHERE grade > ALL (SELECT grade FROM customer WHERE city = 'New York')

Query to find all those customers whose grade are not as the grade, belongs to the city Paris.

SELECT * FROM customer WHERE grade NOT IN (SELECT grade FROM customer
	WHERE city='Paris');

Query to find all those customers who hold a different grade than any customer of the city Dallas.

SELECT * FROM customer WHERE NOT grade = ANY (SELECT grade
	FROM customer WHERE city='Dallas');


Query in SQL to find all the details of employees whose last name is Gabriel or Dosio

SELECT * FROM emp_details WHERE emp_lname IN ('Gabriel', 'Dosio');



To list all the customers who have total fixed deposit of amount less than the sum of all their loans 

Select cust_id,sum(fd_amount) from fd_account group by cust_id having sum(fd_amount)< (select sum(loan_amount) from loan_account where loan_account.cust_id = fd_account.cust_id group by cust_id)

List all the items which are sold

Select * from item where exists(select * from lineitem where item.itemcode=lineitem.itemcode)

List all the items which are not been sold

Select * from item where not exists(select * from lineitem where item.itemcode=lineitem.itemcode)

The following SQL statement lists the employees that have registered more than 10 orders:

SELECT Employees.LastName, COUNT(Orders.OrderID) AS NumberOfOrders
FROM (Orders INNER JOIN Employees ON Orders.EmployeeID = Employees.EmployeeID) GROUP BY LastName HAVING COUNT(Orders.OrderID) > 10;

The following SQL statement lists if the employees "Davolio" or "Fuller" have registered more than 25 orders:

SELECT Employees.LastName, COUNT(Orders.OrderID) AS NumberOfOrders
FROM Orders INNER JOIN Employees ON Orders.EmployeeID = Employees.EmployeeID WHERE LastName = 'Davolio' OR LastName = 'Fuller'
GROUP BY LastName HAVING COUNT(Orders.OrderID) > 25;

IMPORTANT sql::
STUDENTS (Sno: int, Sname: varchar(64), Gender: ‘F’ or ‘M’, Age: int),
COURSES (Cno: int, Cname: varchar(32)),
ENROLLMENT (Sno: int, Cno:int, Grade: int).

1.	Find the names of the students who enroll in all the courses.
2.	Find the names of the students who enroll more than 3 courses.
3.	Find the name and the average grade for each course.

3
	SELECT S.Sname
	FROM Students AS S INNER JOIN Enrollment AS E ON S.Sno = E.Sno
	GROUP BY S.Sno, S.Sname 
	HAVING COUNT(*) = (SELECT COUNT(*) FROM Courses)
4
	SELECT S.Sname
	FROM Students AS S INNER JOIN Enrollment AS E ON E.Sno = S.Sno
	GROUP BY S.Sno, S.Sname
	HAVING COUNT(*) > 3
5
	SELECT C.CName, AVG(E.Grade) AS AvgGrade
	FROM Courses AS C INNER JOIN Enrollment AS E ON C.CNo = E.CNo 
	GROUP BY C.Cno, C.CName
