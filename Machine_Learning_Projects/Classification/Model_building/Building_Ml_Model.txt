

import pandas as pd

train = pd.read_csv('/home/qx816/notebooks/Ref_Notebooks/Practice/train.csv')

test = pd.read_csv('/home/qx816/notebooks/Ref_Notebooks/Practice/test.csv')


from sklearn.model_selection import train_test_split

y = train.Result
train.drop(["Result","ID"],axis=1,inplace=True)


X_train, X_test, y_train, y_test = train_test_split(train, y , test_size=0.2,stratify=y)
print X_train.shape, y_train.shape
print X_test.shape, y_test.shape

sk = test.columns.tolist()

features = []
ls=['ID']
for i in sk:
    if i not in ls:
        features.append(i)
		
from sklearn.neighbors import KNeighborsClassifier

model = KNeighborsClassifier(n_neighbors=3,metric="euclidean")

model.fit(X_train,y_train)

train_accuracy = model.score(X_train,y_train)
test_accuracy = model.score(X_test,y_test)
print(train_accuracy,test_accuracy)

test["Result"] = model.predict(test[features])

test.to_csv('submission.csv',index = False)



========================

=========== Using Spider as cells

== shift enter after each cells "#%%"


# -*- coding: utf-8 -*-
"""
Spyder Editor

This is a temporary script file.
"""

import pandas as pd
from sklearn import datasets, linear_model
from sklearn.model_selection import train_test_split
from matplotlib import pyplot as plt

#%%

# Load the Diabetes dataset
columns = "age sex bmi map tc ldl hdl tch ltg glu".split() # Declare the columns names
diabetes = datasets.load_diabetes() # Call the diabetes dataset from sklearn
df = pd.DataFrame(diabetes.data, columns=columns) # load the dataset as a pandas data frame
y = diabetes.target # define the target variable (dependent variable) as y

#%%
# create training and testing vars
X_train, X_test, y_train, y_test = train_test_split(df, y, test_size=0.2)
print(X_train.shape, y_train.shape)
print(X_test.shape, y_test.shape)

#%%

# fit a model
lm = linear_model.LinearRegression()
model = lm.fit(X_train, y_train)
predictions = lm.predict(X_test)
predictions[0:5]
#%%

## The line / model
plt.scatter(y_test, predictions)
plt.xlabel(“True Values”)
plt.ylabel(“Predictions”)

#%%